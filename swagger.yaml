---
openapi: 3.0.1
info:
  title: API Doc
  description: Computer Shop Project API UI
  version: 1.0.0
servers:
- url: http://localhost:8080
  description: Generated server url
security:
- JWT: []
tags:
- name: 장바구니 API
  description: 요청에 담긴 jwt의 내부 권한이 ADMIN인 경우에만 응답
- name: 판매자 API
  description: 요청에 담긴 jwt의 내부 권한이 ADMIN, SELLER인 경우에만 응답
- name: 모델 스펙 정보 API
  description: 카테고리 이름은 반드시 소문자로 작성
- name: 관리자 API
  description: 요청에 담긴 jwt의 내부 권한이 ADMIN인 경우에만 응답
paths:
  "/api/seller/product":
    post:
      tags:
      - 판매자 API
      summary: 상품 추가
      description: 2개 이미지 필수. 등록자 id는 jwt내에 존재하는 id로 사용
      operationId: addProduct
      requestBody:
        content:
          multipart/form-data:
            schema:
              "$ref": "#/components/schemas/ReqProductDto"
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/seller/product-update/{productId}":
    post:
      tags:
      - 판매자 API
      summary: 상품 정보(이름, 가격, 이미지) 수정
      description: 이 요청에 이미지 포함 시, '이미지 변경'으로 간주
      operationId: updateProduct
      parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              "$ref": "#/components/schemas/ReqUpdateProductInfoDto"
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/review":
    post:
      tags:
      - 리뷰 API
      summary: 리뷰 작성
      description: parentReviewId는 필수 값이 아닙니다.
      operationId: addReview
      parameters:
      - name: reqReviewDto
        in: query
        required: true
        schema:
          "$ref": "#/components/schemas/ReqReviewDto"
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/order/pre-request":
    post:
      tags:
      - 주문 API
      summary: PG사에게 결제 요청 전 호출해야하는 API
      description: orderId, amount 값을 발급합니다.
      operationId: preRequest
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ReqOrderDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/order/approve-request":
    post:
      tags:
      - 주문 API
      summary: 결제 승인 요청
      description: 실제 결제 승인 요청
      operationId: approveRequest
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ReqApproveOrderDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/cart/add":
    post:
      tags:
      - 장바구니 API
      summary: 장바구니 상품 추가
      operationId: addCart
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ReqCartDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/auth/join":
    post:
      tags:
      - 인증 API
      summary: 일반 사용자 회원가입
      operationId: join
      parameters:
      - name: joinUserDto
        in: query
        required: true
        schema:
          "$ref": "#/components/schemas/JoinUserDto"
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/auth/join/seller":
    post:
      tags:
      - 인증 API
      summary: 판매자 회원가입
      description: 추가적으로 필요한 정보 입력
      operationId: joinSeller
      parameters:
      - name: joinSellerDto
        in: query
        required: true
        schema:
          "$ref": "#/components/schemas/JoinSellerDto"
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/user":
    patch:
      tags:
      - 회원 API
      summary: 자신의 회원 정보 수정
      description: jwt의 userId 정보에 해당하는 회원의 정보 수정
      operationId: updateUser
      parameters:
      - name: updateUserDto
        in: query
        required: true
        schema:
          "$ref": "#/components/schemas/UpdateUserDto"
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/user/off":
    patch:
      tags:
      - 회원 API
      summary: 자신의 계정 탈퇴 처리
      description: jwt 내부의 회원 식별자에 해당하는 회원을 삭제(탈퇴) 처리
      operationId: userDeleteTrue
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/seller/product/{productId}":
    patch:
      tags:
      - 판매자 API
      summary: 상품 삭제처리
      description: 자기 자신이 올린 이미지만 삭제처리 가능
      operationId: offProduct
      parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/seller/inven-up/{productId}/{quantity}":
    patch:
      tags:
      - 판매자 API
      summary: 상품 재고 수량 추가
      description: 해당 상품을 게시판 판매자만 요청 가능
      operationId: increaseProductInven
      parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: quantity
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/seller/inven-down/{productId}/{quantity}":
    patch:
      tags:
      - 판매자 API
      summary: 상품 재고 수량 삭제
      description: 해당 상품을 게시판 판매자만 요청 가능
      operationId: decreaseProductInven
      parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: quantity
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/review/{reviewId}":
    delete:
      tags:
      - 리뷰 API
      summary: 리뷰 삭제 처리
      description: 자신이 작성한 리뷰만 삭제할 수 있습니다.
      operationId: deleteReview
      parameters:
      - name: reviewId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
    patch:
      tags:
      - 리뷰 API
      summary: 리뷰 수정
      description: 자신이 작성한 리뷰만 수정할 수 있습니다.
      operationId: updateReview
      parameters:
      - name: reviewId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: reqUpdateReviewDto
        in: query
        required: true
        schema:
          "$ref": "#/components/schemas/ReqUpdateReviewDto"
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/order/cancel/{orderId}":
    patch:
      tags:
      - 주문 API
      summary: 주문 취소
      description: "'준비 중' 상태인 주문만 취소할 수 있습니다."
      operationId: cancelOrder
      parameters:
      - name: orderId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/cart/up/{cartId}":
    patch:
      tags:
      - 장바구니 API
      summary: 장바구니 수량 1 증가
      operationId: upCart
      parameters:
      - name: cartId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/cart/down/{cartId}":
    patch:
      tags:
      - 장바구니 API
      summary: 장바구니 수량 1 감소
      operationId: downCart
      parameters:
      - name: cartId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/business":
    patch:
      tags:
      - 사업자 정보 API
      summary: 자신의 BusinessInfo 정보 수정
      description: jwt의 userId 정보에 해당하는 BusinessInfo의 정보 수정
      operationId: updateBusinessInfo
      parameters:
      - name: reqBusinessInfoDto
        in: query
        required: true
        schema:
          "$ref": "#/components/schemas/ReqBusinessInfoDto"
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/admin/category":
    delete:
      tags:
      - 관리자 API
      summary: 특정 카테고리 제거
      description: 가능한 사용 X
      operationId: deleteCategory
      parameters:
      - name: reqCategoryDto
        in: query
        required: true
        schema:
          "$ref": "#/components/schemas/ReqCategoryDto"
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
    patch:
      tags:
      - 관리자 API
      summary: 특정 카테고리의 이름 변경
      operationId: updateCategory
      parameters:
      - name: reqCategoryDto
        in: query
        required: true
        schema:
          "$ref": "#/components/schemas/ReqCategoryDto"
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/admin/approve-seller/{userId}":
    patch:
      tags:
      - 관리자 API
      summary: 특정 회원의 권한을 판매자로 변경
      operationId: approveSellerAuth
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/user/{userId}":
    get:
      tags:
      - 회원 API
      summary: 식별자로 특정 회원 정보 조회
      operationId: getUserInfoById
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/user/my-info":
    get:
      tags:
      - 회원 API
      summary: 자신의 회원 정보 조회
      description: jwt의 userId 정보에 해당하는 회원의 정보 조회
      operationId: getMyInfo
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/user/email/{email}":
    get:
      tags:
      - 회원 API
      summary: 이메일 주소로 특정 회원 정보 조회
      operationId: getUserInfoByEmail
      parameters:
      - name: email
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/spec/{categoryName}/name/{modelName}/{startOffset}":
    get:
      tags:
      - 모델 스펙 정보 API
      summary: 해당 키워드가 포함된 제품 정보 리스트 조회(페이징)
      operationId: searchByModelName
      parameters:
      - name: categoryName
        in: path
        required: true
        schema:
          type: string
      - name: modelName
        in: path
        required: true
        schema:
          type: string
      - name: startOffset
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/spec/{categoryName}/latest/{startOffset}":
    get:
      tags:
      - 모델 스펙 정보 API
      summary: 등록일자 기준 최신순 조회(페이징)
      operationId: findLatest
      parameters:
      - name: categoryName
        in: path
        required: true
        schema:
          type: string
      - name: startOffset
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/spec/{categoryName}/id/{productSpecId}":
    get:
      tags:
      - 모델 스펙 정보 API
      summary: 식별자로 조회
      description: 상품 상세 정보 창에서 호출 가능
      operationId: findById
      parameters:
      - name: categoryName
        in: path
        required: true
        schema:
          type: string
      - name: productSpecId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/review/{productId}/{startOffset}":
    get:
      tags:
      - 리뷰 API
      summary: 리뷰 조회
      description: 계층 구조는 materializedPath 값으로 식별하시면 됩니다.
      operationId: getReview
      parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: startOffset
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/product/{productId}":
    get:
      tags:
      - 상품 API
      summary: 상품 식별자로 상품 조회
      description: 삭제 처리된 상품이어도 조회
      operationId: getProductById
      parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/product/{categoryName}/popular/{startOffset}":
    get:
      tags:
      - 상품 API
      summary: 판매량 높은순 상품 조회
      description: 10개씩 페이징하여 조회 결과 제공
      operationId: getProductPopular
      parameters:
      - name: categoryName
        in: path
        required: true
        schema:
          type: string
      - name: startOffset
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/product/{categoryName}/lowest-price/{startOffset}":
    get:
      tags:
      - 상품 API
      summary: 낮은 가격순 상품 조회
      description: 10개씩 페이징하여 조회 결과 제공
      operationId: getProductLowestPrice
      parameters:
      - name: categoryName
        in: path
        required: true
        schema:
          type: string
      - name: startOffset
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/product/{categoryName}/latest/{startOffset}":
    get:
      tags:
      - 상품 API
      summary: 등록일자 최신순 상품 조회
      description: 10개씩 페이징하여 조회 결과 제공
      operationId: getProductLatest
      parameters:
      - name: categoryName
        in: path
        required: true
        schema:
          type: string
      - name: startOffset
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/product/{categoryName}/highest-price/{startOffset}":
    get:
      tags:
      - 상품 API
      summary: 높은 가격순 상품 조회
      description: 10개씩 페이징하여 조회 결과 제공
      operationId: getProductHighestPrice
      parameters:
      - name: categoryName
        in: path
        required: true
        schema:
          type: string
      - name: startOffset
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/product/seller/{userId}/{startOffset}":
    get:
      tags:
      - 상품 API
      summary: 판매자 식별자를 통해 특정 판매자가 업로드한 모든 상품 조회
      description: 10개씩 페이징하여 조회 결과 제공
      operationId: getProductListBySellerId
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: startOffset
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/product/image":
    get:
      tags:
      - 상품 API
      summary: 실제 이미지 파일 반환
      description: "'file'이라는 URI 변수에 이미지 키(확장자 포함한 이름)를 포함해주세요."
      operationId: getImageFile
      parameters:
      - name: name
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
                format: binary
  "/api/order/my":
    get:
      tags:
      - 주문 API
      summary: 자신의 주문 내역 조회
      description: 삭제 처리된 주문은 조회하지 않습니다.
      operationId: getMyOrders
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/order-item/{orderId}":
    get:
      tags:
      - 주문 요소 API
      summary: 특정 주문의 주문 요소 조회
      description: 주문 대상 상품의 간략한 정보까지 조회합니다.
      operationId: getOrderItemsByOrderId
      parameters:
      - name: orderId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ResOrderItemsDto"
  "/api/category/{categoryId}":
    get:
      tags:
      - 카테고리 API
      summary: 카테고리 식별자로 카테고리 조회
      operationId: getCategoryById
      parameters:
      - name: categoryId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/category/name/{categoryName}":
    get:
      tags:
      - 카테고리 API
      summary: 카테고리 이름으로 카테고리 조회
      operationId: getCategoryByName
      parameters:
      - name: categoryName
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/cart/my":
    get:
      tags:
      - 장바구니 API
      summary: 자신의 장바구니 리스트 조회
      operationId: getCart
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ResCartDto"
  "/api/business/{userId}":
    get:
      tags:
      - 사업자 정보 API
      summary: 회원 식별자를 이용하여 BusinessInfo 조회
      operationId: getBusinessInfo
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/auth/refresh":
    get:
      tags:
      - 인증 API
      summary: 토큰 모두 재발급
      description: Refresh Token을 이용, 두 종류의 토큰 모두 재발급
      operationId: tokenRefresh
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/auth/dup/{email}":
    get:
      tags:
      - 인증 API
      summary: 이메일 중복검사
      description: 중복된 이메일은 사용 불가
      operationId: isDupEmail
      parameters:
      - name: email
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/order/{orderId}":
    delete:
      tags:
      - 주문 API
      summary: 주문 내역 삭제
      description: "'취소' 혹은 '완료' 상태인 주문만 삭제할 수 있습니다."
      operationId: deleteOrder
      parameters:
      - name: orderId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/cart/{cartId}":
    delete:
      tags:
      - 장바구니 API
      summary: 장바구니 요소 제거
      operationId: deleteCart
      parameters:
      - name: cartId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
components:
  schemas:
    ReqProductDto:
      required:
      - categoryId
      - descriptionImage
      - inventory
      - logicalFK
      - name
      - price
      - productImage
      type: object
      properties:
        name:
          type: string
        categoryId:
          type: integer
          format: int32
        logicalFK:
          type: integer
          format: int64
        price:
          minimum: 1
          type: integer
          format: int32
        inventory:
          minimum: 1
          type: integer
          format: int32
        productImage:
          type: string
          format: binary
        descriptionImage:
          type: string
          format: binary
    ReqUpdateProductInfoDto:
      type: object
      properties:
        name:
          type: string
        price:
          type: integer
          format: int32
        productImage:
          type: string
          format: binary
        descriptionImage:
          type: string
          format: binary
    ReqReviewDto:
      required:
      - comment
      - productId
      type: object
      properties:
        productId:
          type: integer
          format: int64
        parentReviewId:
          type: integer
          format: int64
        comment:
          type: string
    ReqOrderDto:
      required:
      - orderAddress
      - orderItems
      - phone
      type: object
      properties:
        orderAddress:
          type: string
        phone:
          type: string
        orderItems:
          type: array
          items:
            "$ref": "#/components/schemas/ReqOrderItemsDto"
    ReqOrderItemsDto:
      required:
      - productId
      - quantity
      type: object
      properties:
        productId:
          type: integer
          format: int64
        quantity:
          minimum: 1
          type: integer
          format: int32
    ReqApproveOrderDto:
      required:
      - amount
      - orderId
      - paymentKey
      type: object
      properties:
        paymentKey:
          type: string
        orderId:
          type: string
          format: uuid
        amount:
          type: integer
          format: int32
    ReqCartDto:
      required:
      - productId
      - quantity
      type: object
      properties:
        productId:
          type: integer
          format: int64
        quantity:
          minimum: 1
          type: integer
          format: int32
    JoinUserDto:
      required:
      - email
      - name
      - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        name:
          type: string
        birth:
          type: string
          format: date
        phone:
          type: string
        address:
          type: string
        zipCode:
          type: string
    JoinSellerDto:
      required:
      - bankAccount
      - bankName
      - businessNumber
      - businessType
      - depositor
      - email
      - name
      - officeAddress
      - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        name:
          type: string
        birth:
          type: string
          format: date
        phone:
          type: string
        address:
          type: string
        zipCode:
          type: string
        businessType:
          type: string
        businessNumber:
          type: string
        officeAddress:
          type: string
        bankName:
          type: string
        bankAccount:
          type: string
        depositor:
          type: string
    UpdateUserDto:
      required:
      - userId
      type: object
      properties:
        userId:
          type: integer
          format: int64
        password:
          type: string
        name:
          type: string
        birth:
          type: string
          format: date
        phone:
          type: string
        address:
          type: string
        zipCode:
          type: string
    ReqUpdateReviewDto:
      type: object
      properties:
        comment:
          type: string
    ReqBusinessInfoDto:
      type: object
      properties:
        businessType:
          type: string
        businessNumber:
          type: string
        officeAddress:
          type: string
        bankName:
          type: string
        bankAccount:
          type: string
        depositor:
          type: string
    ReqCategoryDto:
      type: object
      properties:
        categoryId:
          type: integer
          format: int32
        categoryName:
          type: string
    ResOrderItemsDto:
      type: object
      properties:
        productId:
          type: integer
          format: int64
        name:
          type: string
        sellerUserId:
          type: integer
          format: int64
        productImageUrl:
          type: string
        quantity:
          type: integer
          format: int32
    ResCartDto:
      type: object
      properties:
        productId:
          type: integer
          format: int64
        productName:
          type: string
        price:
          type: integer
          format: int32
        inventory:
          type: integer
          format: int32
        sellerUserId:
          type: integer
          format: int64
        productImageUrl:
          type: string
        descriptionImageUrl:
          type: string
        cartId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
  securitySchemes:
    JWT:
      type: http
      name: JWT
      scheme: bearer
      bearerFormat: JWT
